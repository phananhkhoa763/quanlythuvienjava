/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package danhmuc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import danhmuc.model.Sach;
import danhmuc.model.SachModel;
import danhmuc.model.SachSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Sach service. Represents a row in the &quot;sach&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link danhmuc.model.SachModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SachImpl}.
 * </p>
 *
 * @author LAPTOP
 * @see SachImpl
 * @see danhmuc.model.Sach
 * @see danhmuc.model.SachModel
 * @generated
 */
@JSON(strict = true)
public class SachModelImpl extends BaseModelImpl<Sach> implements SachModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sach model instance should use the {@link danhmuc.model.Sach} interface instead.
	 */
	public static final String TABLE_NAME = "sach";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "theloaiID", Types.BIGINT },
			{ "soluong", Types.BIGINT },
			{ "nxb", Types.VARCHAR },
			{ "tacgia", Types.VARCHAR },
			{ "masach", Types.VARCHAR },
			{ "ke", Types.BIGINT },
			{ "tang", Types.BIGINT },
			{ "noidung", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table sach (id LONG not null primary key,name VARCHAR(75) null,theloaiID LONG,soluong LONG,nxb VARCHAR(75) null,tacgia VARCHAR(75) null,masach VARCHAR(75) null,ke LONG,tang LONG,noidung VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sach";
	public static final String ORDER_BY_JPQL = " ORDER BY sach.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sach.id ASC";
	public static final String DATA_SOURCE = "quanlythuvienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.danhmuc.model.Sach"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.danhmuc.model.Sach"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Sach toModel(SachSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Sach model = new SachImpl();

		model.setId(soapModel.getId());
		model.setName(soapModel.getName());
		model.setTheloaiID(soapModel.getTheloaiID());
		model.setSoluong(soapModel.getSoluong());
		model.setNxb(soapModel.getNxb());
		model.setTacgia(soapModel.getTacgia());
		model.setMasach(soapModel.getMasach());
		model.setKe(soapModel.getKe());
		model.setTang(soapModel.getTang());
		model.setNoidung(soapModel.getNoidung());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Sach> toModels(SachSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Sach> models = new ArrayList<Sach>(soapModels.length);

		for (SachSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.danhmuc.model.Sach"));

	public SachModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Sach.class;
	}

	@Override
	public String getModelClassName() {
		return Sach.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("name", getName());
		attributes.put("theloaiID", getTheloaiID());
		attributes.put("soluong", getSoluong());
		attributes.put("nxb", getNxb());
		attributes.put("tacgia", getTacgia());
		attributes.put("masach", getMasach());
		attributes.put("ke", getKe());
		attributes.put("tang", getTang());
		attributes.put("noidung", getNoidung());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Long theloaiID = (Long)attributes.get("theloaiID");

		if (theloaiID != null) {
			setTheloaiID(theloaiID);
		}

		Long soluong = (Long)attributes.get("soluong");

		if (soluong != null) {
			setSoluong(soluong);
		}

		String nxb = (String)attributes.get("nxb");

		if (nxb != null) {
			setNxb(nxb);
		}

		String tacgia = (String)attributes.get("tacgia");

		if (tacgia != null) {
			setTacgia(tacgia);
		}

		String masach = (String)attributes.get("masach");

		if (masach != null) {
			setMasach(masach);
		}

		Long ke = (Long)attributes.get("ke");

		if (ke != null) {
			setKe(ke);
		}

		Long tang = (Long)attributes.get("tang");

		if (tang != null) {
			setTang(tang);
		}

		String noidung = (String)attributes.get("noidung");

		if (noidung != null) {
			setNoidung(noidung);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public long getTheloaiID() {
		return _theloaiID;
	}

	@Override
	public void setTheloaiID(long theloaiID) {
		_theloaiID = theloaiID;
	}

	@JSON
	@Override
	public long getSoluong() {
		return _soluong;
	}

	@Override
	public void setSoluong(long soluong) {
		_soluong = soluong;
	}

	@JSON
	@Override
	public String getNxb() {
		if (_nxb == null) {
			return StringPool.BLANK;
		}
		else {
			return _nxb;
		}
	}

	@Override
	public void setNxb(String nxb) {
		_nxb = nxb;
	}

	@JSON
	@Override
	public String getTacgia() {
		if (_tacgia == null) {
			return StringPool.BLANK;
		}
		else {
			return _tacgia;
		}
	}

	@Override
	public void setTacgia(String tacgia) {
		_tacgia = tacgia;
	}

	@JSON
	@Override
	public String getMasach() {
		if (_masach == null) {
			return StringPool.BLANK;
		}
		else {
			return _masach;
		}
	}

	@Override
	public void setMasach(String masach) {
		_masach = masach;
	}

	@JSON
	@Override
	public long getKe() {
		return _ke;
	}

	@Override
	public void setKe(long ke) {
		_ke = ke;
	}

	@JSON
	@Override
	public long getTang() {
		return _tang;
	}

	@Override
	public void setTang(long tang) {
		_tang = tang;
	}

	@JSON
	@Override
	public String getNoidung() {
		if (_noidung == null) {
			return StringPool.BLANK;
		}
		else {
			return _noidung;
		}
	}

	@Override
	public void setNoidung(String noidung) {
		_noidung = noidung;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Sach.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Sach toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Sach)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SachImpl sachImpl = new SachImpl();

		sachImpl.setId(getId());
		sachImpl.setName(getName());
		sachImpl.setTheloaiID(getTheloaiID());
		sachImpl.setSoluong(getSoluong());
		sachImpl.setNxb(getNxb());
		sachImpl.setTacgia(getTacgia());
		sachImpl.setMasach(getMasach());
		sachImpl.setKe(getKe());
		sachImpl.setTang(getTang());
		sachImpl.setNoidung(getNoidung());

		sachImpl.resetOriginalValues();

		return sachImpl;
	}

	@Override
	public int compareTo(Sach sach) {
		long primaryKey = sach.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Sach)) {
			return false;
		}

		Sach sach = (Sach)obj;

		long primaryKey = sach.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Sach> toCacheModel() {
		SachCacheModel sachCacheModel = new SachCacheModel();

		sachCacheModel.id = getId();

		sachCacheModel.name = getName();

		String name = sachCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			sachCacheModel.name = null;
		}

		sachCacheModel.theloaiID = getTheloaiID();

		sachCacheModel.soluong = getSoluong();

		sachCacheModel.nxb = getNxb();

		String nxb = sachCacheModel.nxb;

		if ((nxb != null) && (nxb.length() == 0)) {
			sachCacheModel.nxb = null;
		}

		sachCacheModel.tacgia = getTacgia();

		String tacgia = sachCacheModel.tacgia;

		if ((tacgia != null) && (tacgia.length() == 0)) {
			sachCacheModel.tacgia = null;
		}

		sachCacheModel.masach = getMasach();

		String masach = sachCacheModel.masach;

		if ((masach != null) && (masach.length() == 0)) {
			sachCacheModel.masach = null;
		}

		sachCacheModel.ke = getKe();

		sachCacheModel.tang = getTang();

		sachCacheModel.noidung = getNoidung();

		String noidung = sachCacheModel.noidung;

		if ((noidung != null) && (noidung.length() == 0)) {
			sachCacheModel.noidung = null;
		}

		return sachCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", theloaiID=");
		sb.append(getTheloaiID());
		sb.append(", soluong=");
		sb.append(getSoluong());
		sb.append(", nxb=");
		sb.append(getNxb());
		sb.append(", tacgia=");
		sb.append(getTacgia());
		sb.append(", masach=");
		sb.append(getMasach());
		sb.append(", ke=");
		sb.append(getKe());
		sb.append(", tang=");
		sb.append(getTang());
		sb.append(", noidung=");
		sb.append(getNoidung());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("danhmuc.model.Sach");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>theloaiID</column-name><column-value><![CDATA[");
		sb.append(getTheloaiID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soluong</column-name><column-value><![CDATA[");
		sb.append(getSoluong());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nxb</column-name><column-value><![CDATA[");
		sb.append(getNxb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tacgia</column-name><column-value><![CDATA[");
		sb.append(getTacgia());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masach</column-name><column-value><![CDATA[");
		sb.append(getMasach());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ke</column-name><column-value><![CDATA[");
		sb.append(getKe());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tang</column-name><column-value><![CDATA[");
		sb.append(getTang());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noidung</column-name><column-value><![CDATA[");
		sb.append(getNoidung());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Sach.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Sach.class };
	private long _id;
	private String _name;
	private long _theloaiID;
	private long _soluong;
	private String _nxb;
	private String _tacgia;
	private String _masach;
	private long _ke;
	private long _tang;
	private String _noidung;
	private Sach _escapedModel;
}