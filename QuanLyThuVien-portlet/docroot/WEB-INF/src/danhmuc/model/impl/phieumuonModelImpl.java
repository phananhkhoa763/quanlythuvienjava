/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package danhmuc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import danhmuc.model.phieumuon;
import danhmuc.model.phieumuonModel;
import danhmuc.model.phieumuonSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the phieumuon service. Represents a row in the &quot;phieumuon&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link danhmuc.model.phieumuonModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link phieumuonImpl}.
 * </p>
 *
 * @author LAPTOP
 * @see phieumuonImpl
 * @see danhmuc.model.phieumuon
 * @see danhmuc.model.phieumuonModel
 * @generated
 */
@JSON(strict = true)
public class phieumuonModelImpl extends BaseModelImpl<phieumuon>
	implements phieumuonModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a phieumuon model instance should use the {@link danhmuc.model.phieumuon} interface instead.
	 */
	public static final String TABLE_NAME = "phieumuon";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "sachId", Types.BIGINT },
			{ "ngaymuon", Types.TIMESTAMP },
			{ "ngaytra", Types.TIMESTAMP },
			{ "xacnhan", Types.BIGINT },
			{ "trangthai", Types.BIGINT },
			{ "soluong", Types.BIGINT },
			{ "giahan", Types.BIGINT },
			{ "lydo", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table phieumuon (id LONG not null primary key,userId LONG,sachId LONG,ngaymuon DATE null,ngaytra DATE null,xacnhan LONG,trangthai LONG,soluong LONG,giahan LONG,lydo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table phieumuon";
	public static final String ORDER_BY_JPQL = " ORDER BY phieumuon.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY phieumuon.id ASC";
	public static final String DATA_SOURCE = "quanlythuvienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.danhmuc.model.phieumuon"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.danhmuc.model.phieumuon"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static phieumuon toModel(phieumuonSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		phieumuon model = new phieumuonImpl();

		model.setId(soapModel.getId());
		model.setUserId(soapModel.getUserId());
		model.setSachId(soapModel.getSachId());
		model.setNgaymuon(soapModel.getNgaymuon());
		model.setNgaytra(soapModel.getNgaytra());
		model.setXacnhan(soapModel.getXacnhan());
		model.setTrangthai(soapModel.getTrangthai());
		model.setSoluong(soapModel.getSoluong());
		model.setGiahan(soapModel.getGiahan());
		model.setLydo(soapModel.getLydo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<phieumuon> toModels(phieumuonSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<phieumuon> models = new ArrayList<phieumuon>(soapModels.length);

		for (phieumuonSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.danhmuc.model.phieumuon"));

	public phieumuonModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return phieumuon.class;
	}

	@Override
	public String getModelClassName() {
		return phieumuon.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userId", getUserId());
		attributes.put("sachId", getSachId());
		attributes.put("ngaymuon", getNgaymuon());
		attributes.put("ngaytra", getNgaytra());
		attributes.put("xacnhan", getXacnhan());
		attributes.put("trangthai", getTrangthai());
		attributes.put("soluong", getSoluong());
		attributes.put("giahan", getGiahan());
		attributes.put("lydo", getLydo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long sachId = (Long)attributes.get("sachId");

		if (sachId != null) {
			setSachId(sachId);
		}

		Date ngaymuon = (Date)attributes.get("ngaymuon");

		if (ngaymuon != null) {
			setNgaymuon(ngaymuon);
		}

		Date ngaytra = (Date)attributes.get("ngaytra");

		if (ngaytra != null) {
			setNgaytra(ngaytra);
		}

		Long xacnhan = (Long)attributes.get("xacnhan");

		if (xacnhan != null) {
			setXacnhan(xacnhan);
		}

		Long trangthai = (Long)attributes.get("trangthai");

		if (trangthai != null) {
			setTrangthai(trangthai);
		}

		Long soluong = (Long)attributes.get("soluong");

		if (soluong != null) {
			setSoluong(soluong);
		}

		Long giahan = (Long)attributes.get("giahan");

		if (giahan != null) {
			setGiahan(giahan);
		}

		String lydo = (String)attributes.get("lydo");

		if (lydo != null) {
			setLydo(lydo);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getSachId() {
		return _sachId;
	}

	@Override
	public void setSachId(long sachId) {
		_sachId = sachId;
	}

	@JSON
	@Override
	public Date getNgaymuon() {
		return _ngaymuon;
	}

	@Override
	public void setNgaymuon(Date ngaymuon) {
		_ngaymuon = ngaymuon;
	}

	@JSON
	@Override
	public Date getNgaytra() {
		return _ngaytra;
	}

	@Override
	public void setNgaytra(Date ngaytra) {
		_ngaytra = ngaytra;
	}

	@JSON
	@Override
	public long getXacnhan() {
		return _xacnhan;
	}

	@Override
	public void setXacnhan(long xacnhan) {
		_xacnhan = xacnhan;
	}

	@JSON
	@Override
	public long getTrangthai() {
		return _trangthai;
	}

	@Override
	public void setTrangthai(long trangthai) {
		_trangthai = trangthai;
	}

	@JSON
	@Override
	public long getSoluong() {
		return _soluong;
	}

	@Override
	public void setSoluong(long soluong) {
		_soluong = soluong;
	}

	@JSON
	@Override
	public long getGiahan() {
		return _giahan;
	}

	@Override
	public void setGiahan(long giahan) {
		_giahan = giahan;
	}

	@JSON
	@Override
	public String getLydo() {
		if (_lydo == null) {
			return StringPool.BLANK;
		}
		else {
			return _lydo;
		}
	}

	@Override
	public void setLydo(String lydo) {
		_lydo = lydo;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			phieumuon.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public phieumuon toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (phieumuon)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		phieumuonImpl phieumuonImpl = new phieumuonImpl();

		phieumuonImpl.setId(getId());
		phieumuonImpl.setUserId(getUserId());
		phieumuonImpl.setSachId(getSachId());
		phieumuonImpl.setNgaymuon(getNgaymuon());
		phieumuonImpl.setNgaytra(getNgaytra());
		phieumuonImpl.setXacnhan(getXacnhan());
		phieumuonImpl.setTrangthai(getTrangthai());
		phieumuonImpl.setSoluong(getSoluong());
		phieumuonImpl.setGiahan(getGiahan());
		phieumuonImpl.setLydo(getLydo());

		phieumuonImpl.resetOriginalValues();

		return phieumuonImpl;
	}

	@Override
	public int compareTo(phieumuon phieumuon) {
		long primaryKey = phieumuon.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof phieumuon)) {
			return false;
		}

		phieumuon phieumuon = (phieumuon)obj;

		long primaryKey = phieumuon.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<phieumuon> toCacheModel() {
		phieumuonCacheModel phieumuonCacheModel = new phieumuonCacheModel();

		phieumuonCacheModel.id = getId();

		phieumuonCacheModel.userId = getUserId();

		phieumuonCacheModel.sachId = getSachId();

		Date ngaymuon = getNgaymuon();

		if (ngaymuon != null) {
			phieumuonCacheModel.ngaymuon = ngaymuon.getTime();
		}
		else {
			phieumuonCacheModel.ngaymuon = Long.MIN_VALUE;
		}

		Date ngaytra = getNgaytra();

		if (ngaytra != null) {
			phieumuonCacheModel.ngaytra = ngaytra.getTime();
		}
		else {
			phieumuonCacheModel.ngaytra = Long.MIN_VALUE;
		}

		phieumuonCacheModel.xacnhan = getXacnhan();

		phieumuonCacheModel.trangthai = getTrangthai();

		phieumuonCacheModel.soluong = getSoluong();

		phieumuonCacheModel.giahan = getGiahan();

		phieumuonCacheModel.lydo = getLydo();

		String lydo = phieumuonCacheModel.lydo;

		if ((lydo != null) && (lydo.length() == 0)) {
			phieumuonCacheModel.lydo = null;
		}

		return phieumuonCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", sachId=");
		sb.append(getSachId());
		sb.append(", ngaymuon=");
		sb.append(getNgaymuon());
		sb.append(", ngaytra=");
		sb.append(getNgaytra());
		sb.append(", xacnhan=");
		sb.append(getXacnhan());
		sb.append(", trangthai=");
		sb.append(getTrangthai());
		sb.append(", soluong=");
		sb.append(getSoluong());
		sb.append(", giahan=");
		sb.append(getGiahan());
		sb.append(", lydo=");
		sb.append(getLydo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("danhmuc.model.phieumuon");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sachId</column-name><column-value><![CDATA[");
		sb.append(getSachId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngaymuon</column-name><column-value><![CDATA[");
		sb.append(getNgaymuon());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngaytra</column-name><column-value><![CDATA[");
		sb.append(getNgaytra());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xacnhan</column-name><column-value><![CDATA[");
		sb.append(getXacnhan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trangthai</column-name><column-value><![CDATA[");
		sb.append(getTrangthai());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soluong</column-name><column-value><![CDATA[");
		sb.append(getSoluong());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>giahan</column-name><column-value><![CDATA[");
		sb.append(getGiahan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lydo</column-name><column-value><![CDATA[");
		sb.append(getLydo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = phieumuon.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			phieumuon.class
		};
	private long _id;
	private long _userId;
	private String _userUuid;
	private long _sachId;
	private Date _ngaymuon;
	private Date _ngaytra;
	private long _xacnhan;
	private long _trangthai;
	private long _soluong;
	private long _giahan;
	private String _lydo;
	private phieumuon _escapedModel;
}