/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package danhmuc.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import danhmuc.model.phieugiahan;
import danhmuc.model.phieugiahanModel;
import danhmuc.model.phieugiahanSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the phieugiahan service. Represents a row in the &quot;phieugiahan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link danhmuc.model.phieugiahanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link phieugiahanImpl}.
 * </p>
 *
 * @author LAPTOP
 * @see phieugiahanImpl
 * @see danhmuc.model.phieugiahan
 * @see danhmuc.model.phieugiahanModel
 * @generated
 */
@JSON(strict = true)
public class phieugiahanModelImpl extends BaseModelImpl<phieugiahan>
	implements phieugiahanModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a phieugiahan model instance should use the {@link danhmuc.model.phieugiahan} interface instead.
	 */
	public static final String TABLE_NAME = "phieugiahan";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "ngaygiahan", Types.TIMESTAMP },
			{ "phieumuonId", Types.BIGINT },
			{ "xacnhan", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table phieugiahan (id LONG not null primary key,ngaygiahan DATE null,phieumuonId LONG,xacnhan LONG)";
	public static final String TABLE_SQL_DROP = "drop table phieugiahan";
	public static final String ORDER_BY_JPQL = " ORDER BY phieugiahan.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY phieugiahan.id ASC";
	public static final String DATA_SOURCE = "quanlythuvienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.danhmuc.model.phieugiahan"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.danhmuc.model.phieugiahan"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static phieugiahan toModel(phieugiahanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		phieugiahan model = new phieugiahanImpl();

		model.setId(soapModel.getId());
		model.setNgaygiahan(soapModel.getNgaygiahan());
		model.setPhieumuonId(soapModel.getPhieumuonId());
		model.setXacnhan(soapModel.getXacnhan());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<phieugiahan> toModels(phieugiahanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<phieugiahan> models = new ArrayList<phieugiahan>(soapModels.length);

		for (phieugiahanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.danhmuc.model.phieugiahan"));

	public phieugiahanModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return phieugiahan.class;
	}

	@Override
	public String getModelClassName() {
		return phieugiahan.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("ngaygiahan", getNgaygiahan());
		attributes.put("phieumuonId", getPhieumuonId());
		attributes.put("xacnhan", getXacnhan());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Date ngaygiahan = (Date)attributes.get("ngaygiahan");

		if (ngaygiahan != null) {
			setNgaygiahan(ngaygiahan);
		}

		Long phieumuonId = (Long)attributes.get("phieumuonId");

		if (phieumuonId != null) {
			setPhieumuonId(phieumuonId);
		}

		Long xacnhan = (Long)attributes.get("xacnhan");

		if (xacnhan != null) {
			setXacnhan(xacnhan);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public Date getNgaygiahan() {
		return _ngaygiahan;
	}

	@Override
	public void setNgaygiahan(Date ngaygiahan) {
		_ngaygiahan = ngaygiahan;
	}

	@JSON
	@Override
	public long getPhieumuonId() {
		return _phieumuonId;
	}

	@Override
	public void setPhieumuonId(long phieumuonId) {
		_phieumuonId = phieumuonId;
	}

	@JSON
	@Override
	public long getXacnhan() {
		return _xacnhan;
	}

	@Override
	public void setXacnhan(long xacnhan) {
		_xacnhan = xacnhan;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			phieugiahan.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public phieugiahan toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (phieugiahan)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		phieugiahanImpl phieugiahanImpl = new phieugiahanImpl();

		phieugiahanImpl.setId(getId());
		phieugiahanImpl.setNgaygiahan(getNgaygiahan());
		phieugiahanImpl.setPhieumuonId(getPhieumuonId());
		phieugiahanImpl.setXacnhan(getXacnhan());

		phieugiahanImpl.resetOriginalValues();

		return phieugiahanImpl;
	}

	@Override
	public int compareTo(phieugiahan phieugiahan) {
		long primaryKey = phieugiahan.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof phieugiahan)) {
			return false;
		}

		phieugiahan phieugiahan = (phieugiahan)obj;

		long primaryKey = phieugiahan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<phieugiahan> toCacheModel() {
		phieugiahanCacheModel phieugiahanCacheModel = new phieugiahanCacheModel();

		phieugiahanCacheModel.id = getId();

		Date ngaygiahan = getNgaygiahan();

		if (ngaygiahan != null) {
			phieugiahanCacheModel.ngaygiahan = ngaygiahan.getTime();
		}
		else {
			phieugiahanCacheModel.ngaygiahan = Long.MIN_VALUE;
		}

		phieugiahanCacheModel.phieumuonId = getPhieumuonId();

		phieugiahanCacheModel.xacnhan = getXacnhan();

		return phieugiahanCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", ngaygiahan=");
		sb.append(getNgaygiahan());
		sb.append(", phieumuonId=");
		sb.append(getPhieumuonId());
		sb.append(", xacnhan=");
		sb.append(getXacnhan());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("danhmuc.model.phieugiahan");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngaygiahan</column-name><column-value><![CDATA[");
		sb.append(getNgaygiahan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phieumuonId</column-name><column-value><![CDATA[");
		sb.append(getPhieumuonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xacnhan</column-name><column-value><![CDATA[");
		sb.append(getXacnhan());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = phieugiahan.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			phieugiahan.class
		};
	private long _id;
	private Date _ngaygiahan;
	private long _phieumuonId;
	private long _xacnhan;
	private phieugiahan _escapedModel;
}